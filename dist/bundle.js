!function(t){var i={};function e(s){if(i[s])return i[s].exports;var a=i[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,e),a.l=!0,a.exports}e.m=t,e.c=i,e.d=function(t,i,s){e.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:s})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,i){if(1&i&&(t=e(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(e.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var a in t)e.d(s,a,function(i){return t[i]}.bind(null,a));return s},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=1)}([function(t,i,e){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.getFont=i.debounce=i.roundedRect=i.milimeterToPixel=void 0,i.milimeterToPixel=t=>3.779527559*t,i.roundedRect=(t,i,e,s,a,h,r,o,n,d,c)=>{t.save();let l=i,u=e,g=n;c&&(t.translate(i+s/2,e+a/2),t.rotate((c||0*Math.PI)/180),t.fillStyle="blue",t.fillRect(0,0,2,2),l=-s/2,u=-a/2),t.strokeStyle=o,t.fillStyle=r,d&&(g*=2),t.lineWidth=g,t.beginPath(),t.moveTo(l+h,u),t.quadraticCurveTo(l,u,l,u+h),t.lineTo(l,u+a-h),t.quadraticCurveTo(l,u+a,l+h,u+a),t.lineTo(l+s-h,u+a),t.quadraticCurveTo(l+s,u+a,l+s,u+a-h),t.lineTo(l+s,u+h),t.quadraticCurveTo(l+s,u,l+s-h,u),t.closePath(),t.stroke(),d&&t.fill(),t.restore()},i.debounce=(t,i)=>{let e;return function(...s){clearTimeout(e),e=setTimeout(()=>{e=null,t(...s)},i)}},i.getFont=(t,i)=>`${t}px ${i}`},function(t,i,e){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const s=e(2);window.onload=()=>{(new s.default).start()}},function(t,i,e){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const s=e(3),a=e(4),h=e(6);i.default=class{constructor(){this.canvas=document.getElementById("uno"),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.width=this.canvas.width,this.height=this.canvas.height,this.canvas.style.border="1px solid black",this.ctx=this.canvas.getContext("2d"),this.state={grabbedCard:void 0,hoverCard:void 0,mouseUpPosition:{x:void 0,y:void 0},mouseDownPosition:{x:void 0,y:void 0},mouseLastPosition:{x:void 0,y:void 0},clicking:!1},this.events=[],this.running=!1,this.cards=[],this.gameConfig={nCards:108},this.hand=void 0}start(){this.init(),this.running&&requestAnimationFrame(this.animate.bind(this))}setContextCursor(t){return this.canvas.style.cursor!==t&&(this.canvas.style.cursor=t),t}grabCard(t){this.state.grabbedCard||(this.setContextCursor("grabbing"),t.setState("grabbing",!0),this.state.grabbedCard=t,this.state.grabbedCard.setState("inHand",!1));const i=this.state.mouseDownPosition.x-t.initialX,e=this.state.mouseDownPosition.y-t.initialY;return t.x=Number((this.state.mouseLastPosition.x-i).toFixed(3)),t.y=Number((this.state.mouseLastPosition.y-e).toFixed(3)),t}releaseCard(t){return this.setContextCursor("grab"),t.initialX=t.x,t.initialY=t.y,t.setState("grabbing",!1),this.state.grabbedCard.setState("inHand",!0),this.state.grabbedCard=void 0,t}onLoop(){this.hand.update(),this.handleHoverCard(this.state.hoverCard),this.state.hoverCard?this.state.clicking?this.grabCard(this.state.hoverCard):this.state.grabbedCard&&this.releaseCard(this.state.grabbedCard):this.state.clicking||(this.setContextCursor("initial"),this.state.hoverCard&&(this.state.hoverCard=void 0)),this.state.grabbedCard&&(this.state.clicking?this.grabCard(this.state.grabbedCard):this.releaseCard(this.state.grabbedCard)),this.state.clicking||(this.state.mouseDownPosition={x:void 0,y:void 0})}init(){window.addEventListener("mousemove",this.handleMouseMove.bind(this),!1),window.addEventListener("mousedown",this.handleMouseDown.bind(this),!1),window.addEventListener("mouseup",this.handleMouseUp.bind(this),!1),this.hand=new s.default(this.ctx);const t=Object.keys(h.CardColorEnum).filter(t=>!parseInt(t,10)&&0!==parseInt(t,10));for(let i=0;i<20;i+=1){const i=Math.floor(Math.random()*t.length),e=new a.default(this.ctx,{color:t[i],type:"NUMBER",value:Math.floor(10*Math.random())},0,0);this.hand.addCard(e)}this.hand.initHand(),this.running=!0}onRender(){this.drawBackground(),this.hand.drawHand()}animate(){this.onLoop(),this.onRender(),requestAnimationFrame(this.animate.bind(this))}handleMouseDown(t){this.state.clicking=!0,this.state.mouseDownPosition={x:t.offsetX,y:t.offsetY}}handleMouseUp(t){this.state.clicking=!1,this.state.mouseUpPosition={x:t.offsetX,y:t.offsetY}}handleMouseMove(t){if(this.state.mouseLastPosition={x:t.offsetX,y:t.offsetY},!this.state.clicking){const i=[...this.hand.cards].reverse();let e=!1;i.forEach(i=>(i.isHovering(t.offsetX,t.offsetY)&&!e&&(this.setContextCursor("grab"),this.state.hoverCard=i,e=!0),i.state.hovering=!1,!0))}}drawBackground(){this.ctx.fillStyle="rgb(230, 230, 230)",this.ctx.fillRect(0,0,this.width,this.height)}handleHoverCard(t){if(t&&t===this.state.hoverCard){t.isHovering(this.state.mouseLastPosition.x,this.state.mouseLastPosition.y)?this.state.clicking||t.state.inHand&&(this.state.hoverCard.state.hovering=!0,t.shake(),t.highlight()):this.state.clicking||(this.state.hoverCard.state.hovering=!1,this.state.hoverCard=void 0)}}drawDebug(){this.ctx.fillStyle="orange",this.ctx.fillRect(this.state.mouseLastPosition.x,this.state.mouseLastPosition.y,5,5);const t=this.canvas.height-80-10,i=60;let e=10;this.ctx.fillStyle=this.state.clicking?"green":"black",this.ctx.fillRect(e,t,i,i),e+=80,this.ctx.fillStyle=this.state.hoverCard?this.state.hoverCard.getRGB():"black",this.ctx.fillRect(10+e,t,i,i),e+=80,this.ctx.fillStyle=this.state.grabbedCard?this.state.grabbedCard.getRGB():"black",this.ctx.fillRect(10+e,t,i,i)}}},function(t,i,e){"use strict";Object.defineProperty(i,"__esModule",{value:!0});i.default=class{constructor(t){this.ctx=t,this.cards=[],this.bottomMargin=100}initHand(){const t=this.ctx.canvas;if(this.cards.length>0){let i=t.width/this.cards.length*2;const e=.6;this.cards.forEach((s,a)=>{const h=i,r=t.height-100-s.height-.9*a;s.setPos(h,r),i+=s.width-s.width*e})}}addCard(t){return this.cards.push(t),t}update(){this.cards.forEach(t=>{t.update()})}drawHand(){this.cards.forEach(t=>{t.draw()})}}},function(t,i,e){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const s=e(0),a=e(5);i.default=class{constructor(t,i,e,h){this.ctx=t,this.initialWidth=s.milimeterToPixel(57),this.initialHeight=s.milimeterToPixel(89),this.x=e,this.initialX=e,this.y=h,this.initialY=h,this.state={animationRotationDirection:1,shaking:!1,highlighting:!1,hovering:!1,rotation:0,sizeRatio:.8,frontFacing:!0,grabbing:!1,inHand:!0},this.borderWidth=18*this.state.sizeRatio,this.borderRadius=18*this.state.sizeRatio,this.offsetX=0,this.offsetY=0,this.config=i,this.cardFrontFace=new a.default(this),this.color=this.getRGB()}get width(){return this.initialWidth*this.state.sizeRatio-2*this.borderWidth}get height(){return this.initialHeight*this.state.sizeRatio-2*this.borderWidth}get left(){return this.x-this.borderRadius}get right(){return this.x+this.width+this.borderRadius}get top(){return this.y-this.borderRadius}get bottom(){return this.y+this.height-this.borderRadius}update(){(this.state.shaking||0!==this.state.rotation)&&this.animateShake(),(this.state.highlighting||this.y<this.initialY&&!this.state.highlighting)&&this.animateMovingTop()}draw(){s.roundedRect(this.ctx,this.x,this.y,this.width,this.height,this.borderRadius,this.color,"rgb(250, 250, 250)",this.borderWidth,!0,this.state.rotation),this.cardFrontFace.draw(),this.ctx.lineWidth=3}setPos(t,i){return this.x=t,this.y=i,this.initialX=t,this.initialY=i,{x:this.x,y:this.y}}shake(){this.state.shaking||(this.state.shaking=!0,setTimeout(()=>{this.state.shaking=!1},50))}highlight(){this.state.highlighting||(this.state.highlighting=!0,setTimeout(()=>{this.state.highlighting=!1},250))}setState(t,i){this.state[t]=i}setSizeRatio(t){let i=t;return i>2?i=2:i<.3&&(i=.5),this.state.sizeRatio=i,this.borderWidth*=i,this.borderRadius*=i,this.state.sizeRatio}isHovering(t,i){return t>=this.left&&t<=this.right&&i>=this.top&&i<=this.bottom}getRGB(){switch(this.config.color){case"BLUE":return"rgb(1, 83, 165)";case"GREEN":return"rgb(98, 167, 50)";case"RED":return"rgb(231, 37, 37)";case"YELLOW":return"rgb(240, 210, 50)";case"ANY":return"rgb(0, 0, 0)";default:return"rgb(255, 0, 255)"}}animateShake(){const{rotation:t,animationRotationDirection:i}=this.state;(t>1&&i>0||t<-1&&i<0)&&(this.state.animationRotationDirection*=-1),this.state.rotation+=.5*i,this.state.rotation=Number(t.toFixed(2))}animateMovingTop(){const t=50*this.state.sizeRatio;let i=20;this.state.highlighting?this.y>=this.initialY-t&&(this.y-=i):(i=20,this.y<=this.initialY&&!this.state.hovering&&(this.y+=i))}drawBoundingRect(){let t;t=this.state.grabbing?"green":this.state.hovering?"magenta":"black",this.ctx.strokeStyle=t,this.ctx.strokeRect(this.x,this.y,this.width,this.height)}}},function(t,i,e){"use strict";Object.defineProperty(i,"__esModule",{value:!0});const s=e(0);i.default=class{constructor(t){this.card=t,this.ctx=t.ctx,this.fontSize=t.height/2.5,this.fontFamily="Arial Black",this.fontStrokeWidth=3*this.card.state.sizeRatio}draw(){this.ctx.save(),this.ctx.translate(this.card.x+this.card.width/2,this.card.y+this.card.height/2),this.ctx.rotate(this.card.state.rotation*Math.PI/180),this.drawBackground(),"NUMBER"===this.card.config.type&&this.drawNumber(this.card.config.value.toString()),this.ctx.restore()}getX(){return this.card.x+this.card.width/2}getY(){return this.card.y+this.card.height/2}drawBackground(){"NUMBER"===this.card.config.type&&(this.ctx.beginPath(),this.ctx.lineWidth=10,this.ctx.ellipse(0,0,this.card.width-80,this.card.height-133,15*Math.PI/180,0,2*Math.PI,!1),this.ctx.strokeStyle="white",this.ctx.stroke())}drawNumber(t){const i=this.card.width/2,e=s.getFont(this.fontSize,this.fontFamily);if(this.ctx.textBaseline="middle",this.ctx.textAlign="center",this.drawText(t,e,0,0,i),"6"===t||"9"===t){const e=this.ctx.measureText(t).width;this.drawBottomDash(0-e/2,0+this.fontSize/3+2*this.card.state.sizeRatio,e,i,this.fontSize)}const a=this.fontSize/2-10,h=s.getFont(a,this.fontFamily),r=0-this.card.width/2+a/2,o=0-this.card.height/2+a/2+10;this.drawText(t,h,r,o,i/2,5);const n=0+this.card.width/2-a/2,d=0+this.card.height/2-a/2-10;if(this.drawText(t,h,n,d,i/2,5),"6"===t||"9"===t){const e=this.ctx.measureText(t).width;this.drawBottomDash(r-e/2,o+5+a/4+2*this.card.state.sizeRatio,e,i/2,a,5),this.drawBottomDash(n-e/2,d+5+a/4+2*this.card.state.sizeRatio,e,i/2,a,5)}}drawTextShadow(t,i,e,s,a,h){this.ctx.fillStyle="black",this.ctx.strokeStyle="black",this.ctx.font=i;for(let i=0;i<e*this.card.state.sizeRatio;i+=1)this.ctx.fillText(t,s-i,a+i/2,h)}drawText(t,i,e,s,a,h=10){this.drawTextShadow(t,i,h,e,s,a),this.ctx.font=i,this.ctx.fillStyle="white",this.ctx.strokeStyle="black",this.ctx.lineWidth=this.fontStrokeWidth,this.ctx.fillText(t,e,s,a),this.ctx.strokeText(t,e,s,a)}drawRectShadow(t,i,e,s,a){this.ctx.fillStyle="black",this.ctx.strokeStyle="black";for(let h=0;h<t*this.card.state.sizeRatio;h+=1)this.ctx.fillRect(i-h,e+h,s,a)}drawBottomDash(t,i,e,s,a,h=10){let r=0,o=e;e>s&&(r=e-s,o=s),this.ctx.strokeRect(t+r,i,o,a/6),this.drawRectShadow(h,t+r,i,o,a/6),this.ctx.strokeStyle="black",this.ctx.fillStyle="white";const n=a/6;this.ctx.fillRect(t+r,i,o,n),this.ctx.strokeRect(t+r,i,o,n)}}},function(t,i,e){"use strict";Object.defineProperty(i,"__esModule",{value:!0}),i.CardTypeEnum=i.CardColorEnum=void 0,function(t){t[t.RED=0]="RED",t[t.YELLOW=1]="YELLOW",t[t.GREEN=2]="GREEN",t[t.BLUE=3]="BLUE",t[t.ANY=4]="ANY"}(i.CardColorEnum||(i.CardColorEnum={})),function(t){t[t.NUMBER=0]="NUMBER",t[t.SKIP=1]="SKIP",t[t.REVERSE=2]="REVERSE",t[t.DRAW_TWO=3]="DRAW_TWO",t[t.WILD=4]="WILD",t[t.WILD_DRAW_FOUR=5]="WILD_DRAW_FOUR"}(i.CardTypeEnum||(i.CardTypeEnum={}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,